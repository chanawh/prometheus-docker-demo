version: '3.8'

services:
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.listen-address=0.0.0.0:9090'
    entrypoint: ["/bin/prometheus"]
    restart: unless-stopped
    networks:
      - monitoring
    environment:
      - PROMETHEUS_WEB_UI=true

  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: node-exporter
    ports:
      - "9100:9100"
    command:
      - '--no-collector.ipvs'
    restart: unless-stopped
    networks:
      - monitoring
    environment:
      - NODE_EXPORTER_COLLECTOR="cpu,disk,filesystem"

  grafana:
    image: grafana/grafana:9.5.0
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - prometheus

  cadvisor:
    build:
      context: ./cadvisor
    container_name: cadvisor
    ports:
      - "8081:8080"  # cAdvisor web UI
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped
    networks:
      - monitoring

  linux-container:
    build:
      context: ./linux-container
    container_name: linux-container
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"] # Adjust endpoint if necessary
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  monitoring:
    driver: bridge
